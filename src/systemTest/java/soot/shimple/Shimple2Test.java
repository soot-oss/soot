package soot.shimple;

/*-
 * #%L
 * Soot - a J*va Optimization Framework
 * %%
 * Copyright (C) 2021 Timothy Hoffman
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */
import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.powermock.core.classloader.annotations.PowerMockIgnore;

import soot.Body;
import soot.SootMethod;
import soot.jimple.JimpleBody;
import soot.options.Options;
import soot.testing.framework.AbstractTestingFramework;
import soot.validation.CheckInitValidator;
import soot.validation.UsesValidator;
import soot.validation.ValidationException;

/**
 * @author Timothy Hoffman
 */
@PowerMockIgnore({ "com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "org.w3c.*" })
public class Shimple2Test extends AbstractTestingFramework {

  private static final boolean DEBUG_PRINT = false;

  private static final String TEST_CLASS = "soot.shimple.ShimpleTestInput";

  @Override
  protected void setupSoot() {
    final Options opts = Options.v();

    // Ensure Shimple form is generated to trigger the bug
    opts.set_via_shimple(true);

    // Enable Jimple optimization pack to demonstrate that both the DeadAssignmentEliminator and CopyPropagator can still
    // cause a java.lang.VerifyError when the exception table contains subsumed exceptions and -via-shimple was used.
    opts.setPhaseOption("jop", "enabled:true");

    if (DEBUG_PRINT) {
      opts.setPhaseOption("jb", "use-original-names:true");
    }
  }

  @Test
  public void testComplexPhi_2A() throws Exception {
    final String TEST_METHOD = "sync";

    SootMethod m = prepareTarget(methodSigFromComponents(TEST_CLASS, "boolean", TEST_METHOD), TEST_CLASS);

    Body b = m.retrieveActiveBody();
    if (DEBUG_PRINT) {
      System.out.println("[testComplexPhi_2A] " + b.getClass().getName() + " = " + b);
    }
    Assert.assertTrue(b instanceof JimpleBody);

    // Ensure that the Soot validators pass
    {
      List<ValidationException> exceptions = new ArrayList<>();
      CheckInitValidator.v().validate(b, exceptions);
      UsesValidator.v().validate(b, exceptions);
      if (DEBUG_PRINT) {
        for (ValidationException e : exceptions) {
          System.out.println(e);
        }
      }
      Assert.assertTrue(exceptions.isEmpty());
    }

    // Convert the body to a runnable classfile, run, and test output.
    Class<?> c = generateClass(m.getDeclaringClass());

    // If the generated bytecode does not pass JVM bytecode verifier, then
    // an exception will occur when trying to create a new instance.
    Object cInstance = c.newInstance();

    Object retVal = c.getMethod(TEST_METHOD).invoke(cInstance);
    Assert.assertEquals(Boolean.FALSE, retVal);
  }
}
