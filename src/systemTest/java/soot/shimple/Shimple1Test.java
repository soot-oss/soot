package soot.shimple;

/*-
 * #%L
 * Soot - a J*va Optimization Framework
 * %%
 * Copyright (C) 2021 Timothy Hoffman
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.util.CheckClassAdapter;
import org.powermock.core.classloader.annotations.PowerMockIgnore;

import soot.Body;
import soot.G;
import soot.ModulePathSourceLocator;
import soot.ModuleScene;
import soot.Scene;
import soot.SootClass;
import soot.SootMethod;
import soot.jimple.JimpleBody;
import soot.options.Options;
import soot.testing.framework.AbstractTestingFramework;
import soot.validation.CheckInitValidator;
import soot.validation.UsesValidator;
import soot.validation.ValidationException;

/**
 * @author Timothy Hoffman
 */
@PowerMockIgnore({ "com.sun.org.apache.xerces.*", "javax.xml.*", "org.xml.*", "org.w3c.*" })
public class Shimple1Test extends AbstractTestingFramework {

  private static final boolean DEBUG_PRINT = false;

  private static final String TEST_CLASS = "soot.shimple.ShimpleTestInput";

  @Override
  protected void setupSoot() {
    final Options opts = Options.v();

    // Ensure Shimple form is generated to trigger the bug
    opts.set_via_shimple(true);

    if (DEBUG_PRINT) {
      opts.setPhaseOption("jb", "use-original-names:true");
    }
  }

  @Test
  public void testComplexPhi_1A() throws Exception {
    final String TEST_METHOD = "sync";

    SootMethod m = prepareTarget(methodSigFromComponents(TEST_CLASS, "boolean", TEST_METHOD), TEST_CLASS);

    Body b = m.retrieveActiveBody();
    if (DEBUG_PRINT) {
      System.out.println("[testComplexPhi_1A] " + b.getClass().getName() + " = " + b);
    }
    Assert.assertTrue(b instanceof JimpleBody);

    // Ensure that the Soot validators pass
    {
      List<ValidationException> exceptions = new ArrayList<>();
      CheckInitValidator.v().validate(b, exceptions);
      UsesValidator.v().validate(b, exceptions);
      if (DEBUG_PRINT) {
        for (ValidationException e : exceptions) {
          System.out.println(e);
        }
      }
      Assert.assertTrue(exceptions.isEmpty());
    }

    // Convert the body to a runnable classfile, run, and test output.
    Class<?> c = generateClass(m.getDeclaringClass());

    // If the generated bytecode does not pass JVM bytecode verifier, then
    // an exception will occur when trying to create a new instance.
    Object cInstance = c.newInstance();

    Object retVal = c.getMethod(TEST_METHOD).invoke(cInstance);
    Assert.assertEquals(Boolean.FALSE, retVal);
  }

  @Test
  public void testComplexPhi_1B() throws Exception {
    final String TEST_METHOD = "hasMethod";

    SootMethod m = prepareTarget(methodSigFromComponents(TEST_CLASS, "java.lang.Class", TEST_METHOD), TEST_CLASS);

    Body b = m.retrieveActiveBody();
    if (DEBUG_PRINT) {
      System.out.println("[testComplexPhi_1B] " + b.getClass().getName() + " = " + b);
    }
    Assert.assertTrue(b instanceof JimpleBody);

    // Ensure that the Soot validators pass
    {
      List<ValidationException> exceptions = new ArrayList<>();
      CheckInitValidator.v().validate(b, exceptions);
      UsesValidator.v().validate(b, exceptions);
      if (DEBUG_PRINT) {
        for (ValidationException e : exceptions) {
          System.out.println(e);
        }
      }
      Assert.assertTrue(exceptions.isEmpty());
    }

    // Convert the body to a runnable classfile, run, and test output.
    Class<?> c = generateClass(m.getDeclaringClass());

    // If the generated bytecode does not pass JVM bytecode verifier, then
    // an exception will occur when trying to create a new instance.
    Object cInstance = c.newInstance();

    Object retVal = c.getMethod(TEST_METHOD).invoke(cInstance);
    Assert.assertEquals(c, retVal);
  }

  @Test
  public void testComplexPhi_1C() throws Exception {
    final String TEST_METHOD = "readProp";

    SootMethod m = prepareTarget(methodSigFromComponents(TEST_CLASS, "java.io.InputStream", TEST_METHOD), TEST_CLASS);

    Body b = m.retrieveActiveBody();
    if (DEBUG_PRINT) {
      System.out.println("[testComplexPhi_1C] " + b.getClass().getName() + " = " + b);
    }
    Assert.assertTrue(b instanceof JimpleBody);

    // Ensure that the Soot validators pass
    {
      List<ValidationException> exceptions = new ArrayList<>();
      CheckInitValidator.v().validate(b, exceptions);
      UsesValidator.v().validate(b, exceptions);
      if (DEBUG_PRINT) {
        for (ValidationException e : exceptions) {
          System.out.println(e);
        }
      }
      Assert.assertTrue(exceptions.isEmpty());
    }

    // Convert the body to a runnable classfile, run, and test output.
    Class<?> c = generateClass(m.getDeclaringClass());

    // If the generated bytecode does not pass JVM bytecode verifier, then
    // an exception will occur when trying to create a new instance.
    Object cInstance = c.newInstance();

    Object retVal = c.getMethod(TEST_METHOD).invoke(cInstance);
    Assert.assertNull(retVal);
  }

  /**
   * TODO: on Java9 and Java11, only the java.* classes are being loaded. All of the others are not located in the
   * "java.base" module but are in different standard modules. I'm not sure how to get Soot to load other modules.
   * 
   * @throws Exception
   */
  @Test
  public void testStdLib() throws Exception {
    final String rtJar = rtJar();
    final boolean isModuleJar = isModuleJar(rtJar);

    // Run both ASM and JVM verifier on these classes.
    final List<String> cls = new ArrayList<>(148);
    // Run only the ASM verifier on these classes because they cannot
    // be loaded successfully via the generateClass(..) method.
    final List<String> clsASM = new ArrayList<>(37);
    if (!isModuleJar) {
      // These are not present in JDK 11
      //
      cls.add("com.sun.corba.se.impl.corba.ServerRequestImpl");
      cls.add("com.sun.corba.se.impl.corba.TCUtility");
      cls.add("com.sun.corba.se.impl.dynamicany.DynEnumImpl");
      cls.add("com.sun.corba.se.impl.dynamicany.DynFixedImpl");
      cls.add("com.sun.corba.se.impl.io.ObjectStreamClass");
      cls.add("com.sun.corba.se.impl.naming.cosnaming.TransientNameServer");
      cls.add("com.sun.corba.se.impl.naming.pcosnaming.ServantManagerImpl");
      cls.add("com.sun.corba.se.impl.oa.poa.POAPolicyMediatorImpl_R_USM");
      cls.add("com.sun.corba.se.impl.orbutil.ObjectStreamClassUtil_1_3");
      cls.add("com.sun.corba.se.impl.orbutil.ObjectStreamClassUtil_1_3$3");
      cls.add("com.sun.corba.se.impl.orbutil.threadpool.ThreadPoolManagerImpl$1");
      cls.add("com.sun.corba.se.impl.presentation.rmi.ReflectiveTie");
      cls.add("com.sun.corba.se.impl.presentation.rmi.StubInvocationHandlerImpl");
      cls.add("com.sun.corba.se.impl.resolver.BootstrapResolverImpl");
      cls.add("com.sun.corba.se.impl.util.Utility");
      cls.add("com.sun.istack.internal.localization.Localizer");
      cls.add("com.sun.jndi.cosnaming.CNCtx");
      cls.add("com.sun.org.apache.bcel.internal.util.SecuritySupport$3");
      cls.add("com.sun.org.apache.xalan.internal.utils.SecuritySupport");
      cls.add("com.sun.org.apache.xalan.internal.utils.SecuritySupport$3");
      cls.add("com.sun.org.apache.xalan.internal.xslt.Process");
      cls.add("com.sun.org.apache.xalan.internal.xsltc.cmdline.Transform");
      cls.add("com.sun.org.apache.xerces.internal.util.XMLCatalogResolver");
      cls.add("com.sun.org.apache.xerces.internal.utils.SecuritySupport");
      cls.add("com.sun.org.apache.xerces.internal.utils.SecuritySupport$3");
      cls.add("com.sun.org.apache.xerces.internal.xinclude.SecuritySupport$3");
      cls.add("com.sun.org.apache.xml.internal.resolver.CatalogManager");
      cls.add("com.sun.org.apache.xml.internal.resolver.tools.CatalogResolver");
      cls.add("com.sun.org.apache.xml.internal.serialize.SecuritySupport$3");
      cls.add("com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer");
      cls.add("com.sun.org.apache.xml.internal.serialize.HTMLdtd");
      cls.add("com.sun.org.apache.xml.internal.serializer.CharInfo");
      cls.add("com.sun.org.apache.xml.internal.serializer.OutputPropertiesFactory");
      cls.add("com.sun.org.apache.xml.internal.utils.XMLReaderManager");
      cls.add("com.sun.xml.internal.bind.v2.runtime.MarshallerImpl");
      cls.add("com.sun.xml.internal.fastinfoset.stax.factory.StAXOutputFactory");
      cls.add("com.sun.xml.internal.messaging.saaj.client.p2p.HttpSOAPConnection");
      cls.add("com.sun.xml.internal.messaging.saaj.packaging.mime.internet.MimeBodyPart");
      cls.add("com.sun.xml.internal.org.jvnet.mimepull.MIMEPart");
      cls.add("com.sun.xml.internal.ws.client.dispatch.DispatchImpl");
      cls.add("com.sun.xml.internal.ws.commons.xmlutil.Converter");
      cls.add("com.sun.xml.internal.ws.encoding.ContentTypeImpl");
      cls.add("com.sun.xml.internal.ws.fault.SOAPFaultBuilder");
      cls.add("com.sun.xml.internal.ws.handler.HandlerProcessor");
      cls.add("com.sun.xml.internal.ws.policy.jaxws.PolicyWSDLParserExtension");
      cls.add("com.sun.xml.internal.ws.transport.http.HttpAdapter$Oneway");
      cls.add("javax.activation.SecuritySupport$3");
      cls.add("javax.activation.SecuritySupport$4");
      cls.add("javax.swing.JOptionPane$ModalPrivilegedAction");
      cls.add("javax.xml.ws.spi.FactoryFinder");
      cls.add("sun.applet.AppletPanel$6");
      cls.add("sun.misc.Launcher");
      cls.add("sun.misc.Service$LazyIterator");
      cls.add("sun.misc.URLClassPath");
      cls.add("sun.rmi.transport.proxy.HttpSendSocket");
      cls.add("sun.tracing.ProviderSkeleton");
      //
      clsASM.add("com.sun.corba.se.impl.dynamicany.DynAnyComplexImpl");
      clsASM.add("com.sun.corba.se.impl.dynamicany.DynUnionImpl");
      clsASM.add("com.sun.corba.se.impl.encoding.CDRInputStream_1_0");
      clsASM.add("com.sun.corba.se.impl.transport.SelectorImpl");
      clsASM.add("com.sun.xml.internal.bind.v2.runtime.property.SingleElementLeafProperty");
      clsASM.add("java.awt.KeyboardFocusManager$5");
      clsASM.add("java.util.ServiceLoader$LazyIterator");
      clsASM.add("javax.xml.bind.ContextFinder");
      clsASM.add("sun.management.Agent");
    }
    cls.add("com.sun.imageio.plugins.png.PNGImageReader");
    cls.add("com.sun.jmx.remote.util.EnvHelp");
    cls.add("com.sun.jndi.dns.DnsContextFactory");
    cls.add("com.sun.jndi.ldap.Connection");
    cls.add("com.sun.jndi.ldap.LdapClient");
    cls.add("com.sun.jndi.ldap.LdapCtx");
    cls.add("com.sun.naming.internal.FactoryEnumeration");
    cls.add("com.sun.naming.internal.ResourceManager");
    cls.add("com.sun.org.apache.xalan.internal.lib.ExsltDynamic");
    cls.add("com.sun.org.apache.xalan.internal.xsltc.compiler.Parser");
    cls.add("com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter");
    cls.add("com.sun.org.apache.xalan.internal.xsltc.trax.TransformerImpl");
    cls.add("com.sun.org.apache.xerces.internal.impl.XMLScanner");
    cls.add("com.sun.org.apache.xerces.internal.impl.dtd.XMLDTDValidator");
    cls.add("com.sun.org.apache.xerces.internal.impl.xpath.regex.REUtil");
    cls.add("com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaLoader");
    cls.add("com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator");
    cls.add("com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDAbstractTraverser");
    cls.add("com.sun.org.apache.xerces.internal.impl.xs.traversers.XSDHandler");
    cls.add("com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl");
    cls.add("com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser");
    cls.add("com.sun.org.apache.xerces.internal.parsers.DOMParser");
    cls.add("com.sun.org.apache.xerces.internal.xinclude.XIncludeHandler");
    cls.add("com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource_Xerces");
    cls.add("com.sun.org.apache.xml.internal.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver");
    cls.add("com.sun.org.apache.xml.internal.security.utils.JavaUtils");
    cls.add("com.sun.org.apache.xml.internal.security.utils.XalanXPathAPI");
    cls.add("com.sun.org.apache.xpath.internal.XPath");
    cls.add("com.sun.rowset.internal.CachedRowSetReader");
    cls.add("com.sun.security.auth.module.KeyStoreLoginModule");
    cls.add("com.sun.security.auth.module.LdapLoginModule");
    cls.add("javax.imageio.ImageIO$ImageReaderIterator");
    cls.add("javax.imageio.ImageIO$ImageWriterIterator");
    cls.add("javax.management.loading.MLet");
    cls.add("javax.management.modelmbean.DescriptorSupport");
    cls.add("javax.management.monitor.Monitor");
    cls.add("javax.management.remote.rmi.RMIConnector");
    cls.add("javax.management.remote.rmi.RMIConnector$RMIClientCommunicatorAdmin");
    cls.add("javax.naming.spi.NamingManager");
    cls.add("javax.smartcardio.TerminalFactory");
    cls.add("javax.sql.rowset.spi.ProviderImpl");
    cls.add("javax.swing.BufferStrategyPaintManager$BufferInfo");
    cls.add("javax.swing.plaf.basic.BasicLookAndFeel");
    cls.add("javax.swing.text.CompositeView");
    cls.add("javax.swing.text.html.StyleSheet$ListPainter");
    cls.add("org.jcp.xml.dsig.internal.dom.DOMReference");
    cls.add("org.xml.sax.helpers.XMLReaderFactory");
    cls.add("sun.awt.SunToolkit");
    cls.add("sun.awt.im.InputContext");
    cls.add("sun.font.FontUtilities$1");
    cls.add("sun.font.SunFontManager");
    cls.add("sun.font.SunFontManager$2");
    cls.add("sun.font.TrueTypeFont");
    cls.add("sun.font.Type1Font");
    cls.add("sun.instrument.InstrumentationImpl");
    cls.add("sun.java2d.opengl.OGLRenderQueue$QueueFlusher");
    cls.add("sun.net.NetProperties");
    cls.add("sun.net.ResourceManager");
    cls.add("sun.net.ftp.impl.FtpClient");
    cls.add("sun.net.ftp.impl.FtpClient$MLSxParser");
    cls.add("sun.net.www.MimeTable");
    cls.add("sun.net.www.http.HttpClient");
    cls.add("sun.net.www.http.KeepAliveStreamCleaner");
    cls.add("sun.net.www.protocol.http.BasicAuthentication");
    cls.add("sun.net.www.protocol.http.HttpURLConnection");
    cls.add("sun.net.www.protocol.http.HttpURLConnection$ErrorStream");
    cls.add("sun.nio.ch.FileChannelImpl");
    cls.add("sun.nio.ch.SocketChannelImpl");
    cls.add("sun.rmi.registry.RegistryImpl");
    cls.add("sun.rmi.server.Activation");
    cls.add("sun.rmi.server.LoaderHandler");
    cls.add("sun.rmi.server.UnicastServerRef");
    cls.add("sun.rmi.transport.StreamRemoteCall");
    cls.add("sun.rmi.transport.Transport");
    cls.add("sun.security.jgss.GSSNameImpl");
    cls.add("sun.security.jgss.krb5.Krb5Context");
    cls.add("sun.security.jgss.krb5.Krb5NameElement");
    cls.add("sun.security.jgss.krb5.Krb5Util");
    cls.add("sun.security.jgss.spnego.SpNegoContext");
    cls.add("sun.security.jgss.wrapper.GSSNameElement");
    cls.add("sun.security.krb5.Credentials");
    cls.add("sun.security.krb5.KdcComm$KdcCommunication");
    cls.add("sun.security.krb5.KrbServiceLocator");
    cls.add("sun.security.krb5.internal.ktab.KeyTabOutputStream");
    cls.add("sun.security.krb5.internal.rcache.DflCache$Storage");
    cls.add("sun.security.pkcs.PKCS7");
    cls.add("sun.security.provider.PolicyFile");
    cls.add("sun.security.rsa.RSAPadding");
    cls.add("sun.security.tools.keytool.Main");
    cls.add("sun.security.util.KeyUtil");
    cls.add("sun.swing.SwingUtilities2");
    cls.add("sun.tools.jar.Main");
    //
    clsASM.add("com.sun.org.apache.xalan.internal.xsltc.compiler.FunctionCall");
    clsASM.add("java.awt.Font");
    clsASM.add("java.awt.datatransfer.SystemFlavorMap");
    clsASM.add("java.awt.font.TextLayout");
    clsASM.add("java.beans.Beans");
    clsASM.add("java.beans.PropertyDescriptor");
    clsASM.add("java.io.FileDescriptor");
    clsASM.add("java.lang.CharacterName");
    clsASM.add("java.lang.ClassLoader");
    clsASM.add("java.net.DefaultDatagramSocketImplFactory");
    clsASM.add("java.net.InetAddress");
    clsASM.add("java.net.ServerSocket");
    clsASM.add("java.net.SocketPermission");
    clsASM.add("java.net.URL");
    clsASM.add("java.net.URLConnection");
    clsASM.add("java.net.URLDecoder");
    clsASM.add("java.net.URLEncoder");
    clsASM.add("java.security.Security");
    clsASM.add("java.time.Month");
    clsASM.add("java.time.MonthDay");
    clsASM.add("java.time.Year");
    clsASM.add("java.time.YearMonth");
    clsASM.add("java.util.Formatter");
    clsASM.add("java.util.concurrent.CyclicBarrier");
    clsASM.add("java.util.jar.Pack200");
    clsASM.add("java.util.logging.FileHandler");
    clsASM.add("java.util.prefs.AbstractPreferences");
    clsASM.add("javax.security.auth.kerberos.KerberosTicket");

    final int NUM_CLASSES = cls.size() + clsASM.size();

    // Run initial pass to ensure they are valid when processed without using Shimple form.
    {
      int pass1 = testStdLibRun(rtJar, cls, false, false);
      int pass2 = testStdLibRun(rtJar, clsASM, false, true);
      Assert.assertEquals("ORIGINAL classes (total " + NUM_CLASSES + ") with errors!", 0, NUM_CLASSES - pass1 - pass2);
    }

    // Reset Soot and process the classes but use Shimple this time to trigger bug.
    {
      int pass1 = testStdLibRun(rtJar, cls, true, false);
      int pass2 = testStdLibRun(rtJar, clsASM, true, true);
      Assert.assertEquals("MODIFIED classes (total " + NUM_CLASSES + ") with errors!", 0, NUM_CLASSES - pass1 - pass2);
    }
  }

  private static String rtJar() throws IOException {
    Path p = Paths.get(System.getProperty("java.home"), "lib", "rt.jar");
    return Files.exists(p) ? p.toRealPath().toString() : null;
  }

  private static boolean isModuleJar(String rtJar) {
    return (rtJar == null);
  }

  private int testStdLibRun(String rtJar, List<String> checkClasses, boolean useShimple, boolean onlyASM) {
    final Scene scene = customSetupLib(rtJar, checkClasses, useShimple);
    int success = 0;
    for (String name : checkClasses) {
      try {
        SootClass sc = getOrResolveSootClass(scene, name, SootClass.BODIES);
        Assert.assertNotNull(sc);
        Assert.assertEquals(name, sc.getName());

        {
          // Run ASM verifier and ensure the message is empty
          byte[] c = generateBytecode(sc);
          StringWriter stringWriter = new StringWriter();
          CheckClassAdapter.verify(new ClassReader(c), false, new PrintWriter(stringWriter));
          String verifyMsg = stringWriter.toString();
          Assert.assertTrue(verifyMsg, verifyMsg.isEmpty());
        }

        if (!onlyASM) {
          // If the generated bytecode does not pass JVM bytecode verifier,
          // then an exception will occur when trying to obtain "declared"
          // fields, methods, constructors, etc.
          Class<?> c = generateClass(sc);
          Assert.assertNotNull(c.getDeclaredFields());
          Assert.assertNotNull(c.getDeclaredConstructors());
          Assert.assertNotNull(c.getDeclaredMethods());
        }

        success++;
      } catch (Throwable t) {
        if (DEBUG_PRINT) {
          String kind = useShimple ? "ShimpleBody" : "JimpleBody";
          System.out.println("[testStdLib] ERROR in a " + kind + " in " + name + " " + t);
          t.printStackTrace(System.out);
        }
      }
    }
    return success;
  }

  private Scene customSetupLib(String rtJar, List<String> classNames, boolean useShimple) {
    G.reset();

    final Options opts = Options.v();

    opts.set_whole_program(true);
    opts.set_output_format(Options.output_format_none);
    opts.set_allow_phantom_refs(true);
    opts.set_no_bodies_for_excluded(true);
    opts.set_exclude(Collections.singletonList("java.*"));
    opts.set_include(classNames);
    opts.set_validate(true);

    final boolean isModuleJar = isModuleJar(rtJar);
    if (isModuleJar) {
      opts.set_soot_modulepath(ModulePathSourceLocator.DUMMY_CLASSPATH_JDK9_FS);
    } else {
      opts.set_soot_classpath(rtJar);
      opts.set_process_dir(Collections.singletonList(rtJar));
    }

    opts.set_via_shimple(useShimple);
    // opts.setPhaseOption("bb.lp", "unsplit-original-locals:true");

    if (DEBUG_PRINT) {
      opts.setPhaseOption("jb", "use-original-names:true");
    }

    // NOTE: must obtain Scene after all options are set
    Scene scene = isModuleJar ? ModuleScene.v() : Scene.v();
    scene.loadNecessaryClasses();
    runSoot();
    return scene;
  }
}
